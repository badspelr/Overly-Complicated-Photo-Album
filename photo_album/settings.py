"""
Django settings for photo_album project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# =============================================================================
# SENTRY ERROR TRACKING
# =============================================================================
# Sentry configuration - will be initialized after database is ready
# The actual initialization happens in album/apps.py to access database settings
SENTRY_DSN = config('SENTRY_DSN', default='')
SENTRY_ENVIRONMENT = config('SENTRY_ENVIRONMENT', default='development')
SENTRY_TRACES_SAMPLE_RATE = config('SENTRY_TRACES_SAMPLE_RATE', default=0.1, cast=float)
SENTRY_PROFILES_SAMPLE_RATE = config('SENTRY_PROFILES_SAMPLE_RATE', default=0.1, cast=float)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Generate with: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# SECURITY WARNING: Update this with your actual domain names in production!
# Example: ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')

# Security settings - Production ready configuration
SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=False, cast=bool)
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=False, cast=bool)
CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=False, cast=bool)
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'Lax'

# CSRF Trusted Origins - Required for production with reverse proxy
# Example: CSRF_TRUSTED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
_csrf_origins = config('CSRF_TRUSTED_ORIGINS', default='')
CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in _csrf_origins.split(',') if origin.strip()] if _csrf_origins else []
X_FRAME_OPTIONS = 'DENY'
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'

# File upload security
FILE_UPLOAD_MAX_MEMORY_SIZE = config('FILE_UPLOAD_MAX_MEMORY_SIZE', default=52428800, cast=int)  # Increased to 50MB
DATA_UPLOAD_MAX_MEMORY_SIZE = config('DATA_UPLOAD_MAX_MEMORY_SIZE', default=104857600, cast=int)  # Increased to 100MB
DATA_UPLOAD_MAX_NUMBER_FILES = config('DATA_UPLOAD_MAX_NUMBER_FILES', default=10000, cast=int)  # Allow large directory uploads
FILE_UPLOAD_PERMISSIONS = 0o644

# AI Configuration
HF_TOKEN = config('HF_TOKEN', default=None)

AI_FEATURES = {
    'AUTO_TAGGING': config('AI_AUTO_TAGGING', default=True, cast=bool),
    'SMART_SEARCH': config('AI_SMART_SEARCH', default=True, cast=bool),
    'DUPLICATE_DETECTION': config('AI_DUPLICATE_DETECTION', default=True, cast=bool),
    'CONTENT_MODERATION': config('AI_CONTENT_MODERATION', default=False, cast=bool),
    'IMAGE_DESCRIPTIONS': config('AI_IMAGE_DESCRIPTIONS', default=True, cast=bool),
}

# AI Models Configuration
AI_MODELS = {
    'IMAGE_TAGGING': config('AI_IMAGE_TAGGING_MODEL', default='microsoft/resnet-50'),
    'SEMANTIC_SEARCH': config('AI_SEMANTIC_MODEL', default='openai/clip-vit-base-patch32'),
    'TEXT_EMBEDDING': config('AI_TEXT_EMBEDDING_MODEL', default='all-MiniLM-L6-v2'),
    'NSFW_DETECTION': config('AI_NSFW_MODEL', default='Falconsai/nsfw_image_detection'),
}

# Vector Search Configuration
PGVECTOR_CONFIG = {
    'EMBEDDING_DIMENSION': 512,  # CLIP model dimension
    'SIMILARITY_THRESHOLD': 0.7,
    'MAX_SEARCH_RESULTS': 50,
}

# AI Processing Configuration
AI_PROCESSING = {
    'BATCH_SIZE': config('AI_BATCH_SIZE', default=4, cast=int),
    'MAX_IMAGE_SIZE': config('AI_MAX_IMAGE_SIZE', default=1024, cast=int),  # pixels
    'ENABLE_GPU': config('AI_ENABLE_GPU', default=False, cast=bool),  # CPU-only for now
    'CACHE_EMBEDDINGS': config('AI_CACHE_EMBEDDINGS', default=True, cast=bool),
}

# Cache configuration
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config('REDIS_URL', default='redis://redis:6379/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SOCKET_CONNECT_TIMEOUT': 5,
            'SOCKET_TIMEOUT': 5,
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 50,
            },
        },
        'KEY_PREFIX': 'photo_album',
        'TIMEOUT': 300,  # 5 minutes default
    },
    'ai_cache': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config('REDIS_URL', default='redis://redis:6379/2'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'ai_embeddings',
        'TIMEOUT': 86400,  # 24 hours
    }
}

# ImageKit configuration
IMAGEKIT_CACHE_BACKEND = 'default'
IMAGEKIT_CACHE_PREFIX = 'imagekit:'
IMAGEKIT_CACHE_TIMEOUT = 300
IMAGEKIT_DEFAULT_CACHEFILE_BACKEND = 'imagekit.cachefiles.backends.Simple'
IMAGEKIT_DEFAULT_CACHEFILE_STRATEGY = 'imagekit.cachefiles.strategies.JustInTime'
IMAGEKIT_DEFAULT_FILE_STORAGE = 'default'
IMAGEKIT_CACHEFILE_DIR = 'CACHE/images'
IMAGEKIT_CACHEFILE_NAMER = 'imagekit.cachefiles.namers.hash'
IMAGEKIT_USE_MEMCACHED_SAFE_CACHE_KEY = False

# Email configuration
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='webmaster@localhost')
CONTACT_EMAIL = config('CONTACT_EMAIL', default=DEFAULT_FROM_EMAIL)
EMAIL_SUBJECT_PREFIX = '[Photo Album] '

if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = config('EMAIL_HOST')
    EMAIL_PORT = config('EMAIL_PORT', cast=int)
    EMAIL_HOST_USER = config('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
    EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)
    SERVER_EMAIL = config('SERVER_EMAIL', default=EMAIL_HOST_USER)


# Application definition

INSTALLED_APPS = [
    'album',  # MUST be before admin to override admin templates
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_spectacular',
    'pgvector',
    'imagekit',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # MUST be right after SecurityMiddleware
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'album.middleware.AlbumAdminMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'album.middleware.ErrorHandlingMiddleware',
    'album.middleware.SecurityHeadersMiddleware',
    'album.middleware.PerformanceLoggingMiddleware',
]

ROOT_URLCONF = 'photo_album.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'album.context_processors.site_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'photo_album.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE', default='django.db.backends.postgresql'),
        'NAME': config('DB_NAME', default='photo_album'),
        'USER': config('DB_USER', default='postgres'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST', default='db'),
        'PORT': config('DB_PORT', default='5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Enhanced logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'detailed': {
            'format': '{levelname} {asctime} {name} {module} {funcName} {lineno:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs/django.log',
            'formatter': 'verbose',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs/security.log',
            'formatter': 'detailed',
        },
        'audit_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs/audit.log',
            'formatter': 'detailed',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs/error.log',
            'formatter': 'detailed',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.audit': {
            'handlers': ['audit_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'album': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'album.ai': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
import os
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

# Redirect after logout
LOGOUT_REDIRECT_URL = '/'

# Redirect after login
LOGIN_REDIRECT_URL = 'album:dashboard'
LOGIN_URL = '/accounts/login/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static_root',  # Root-level static assets (favicon, etc.)
]

# WhiteNoise configuration for serving static files in production
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    # Use drf-spectacular for OpenAPI schema generation
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# DRF Spectacular (OpenAPI/Swagger) Settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Photo Album API',
    'DESCRIPTION': 'AI-powered photo and video management system with advanced search capabilities',
    'VERSION': '1.3.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': r'/api/',
    
    # API Documentation UI Settings
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'filter': True,
    },
    
    # Authentication
    'SERVE_AUTHENTICATION': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],
    
    # Contact & License
    'CONTACT': {
        'name': 'Photo Album Support',
        'email': 'support@photoalbum.example.com',
    },
    'LICENSE': {
        'name': 'MIT License',
    },
    
    # Tagging - Only define tags that are actually used
    'TAGS': [
        {'name': 'Authentication', 'description': 'User registration, login, and profile management'},
        {'name': 'Media', 'description': 'Media upload and bulk operations'},
    ],
    
    # Tag sorting
    'TAGS_SORTER': 'alpha',
    'OPERATIONS_SORTER': 'alpha',
}

# CORS settings
# Configure allowed origins from environment variable for security
# In production, set CORS_ALLOWED_ORIGINS in .env to your specific domains
CORS_ALLOWED_ORIGINS = config(
    'CORS_ALLOWED_ORIGINS',
    default='http://localhost:3000,http://127.0.0.1:3000,http://localhost:8000,http://127.0.0.1:8000',
    cast=lambda v: [s.strip() for s in v.split(',')]
)

# SECURITY WARNING: Never set CORS_ALLOW_ALL_ORIGINS=True in production!
# This is a major security vulnerability that allows any website to access your API.
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', default=False, cast=bool)

CORS_ALLOW_CREDENTIALS = True

# Testing configuration
TEST_RUNNER = 'django.test.runner.DiscoverRunner'

# Celery Configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 600  # 10 minutes hard timeout per task
CELERY_TASK_SOFT_TIME_LIMIT = 540  # 9 minutes soft timeout per task
CELERY_WORKER_PREFETCH_MULTIPLIER = 1  # Process one task at a time
CELERY_WORKER_MAX_TASKS_PER_CHILD = 50  # Restart worker after 50 tasks (prevent memory leaks)

# Preserve Celery startup retry behavior and avoid deprecation warnings
# Celery 6 will change how broker connection retries are handled. To retain
# current behavior (retrying on startup), explicitly enable the new setting.
CELERY_BROKER_CONNECTION_RETRY = config('CELERY_BROKER_CONNECTION_RETRY', default=True, cast=bool)
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = config('CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP', default=True, cast=bool)
# Optional tuning: max retries (None = infinite) and delay (seconds)
_max_retries_value = config('CELERY_BROKER_CONNECTION_MAX_RETRIES', default='')
CELERY_BROKER_CONNECTION_MAX_RETRIES = int(_max_retries_value) if _max_retries_value else None
CELERY_BROKER_CONNECTION_RETRY_DELAY = config('CELERY_BROKER_CONNECTION_RETRY_DELAY', default=2, cast=int)

# AI Processing Configuration
AI_PROCESSING_ENABLED = config('AI_PROCESSING_ENABLED', default=True, cast=bool)
AI_AUTO_PROCESS_ON_UPLOAD = config('AI_AUTO_PROCESS_ON_UPLOAD', default=False, cast=bool)  # Disabled: Use scheduled batch processing instead
AI_SCHEDULED_PROCESSING = config('AI_SCHEDULED_PROCESSING', default=True, cast=bool)
AI_BATCH_SIZE = config('AI_BATCH_SIZE', default=500, cast=int)
AI_PROCESSING_TIMEOUT = config('AI_PROCESSING_TIMEOUT', default=30, cast=int)  # seconds per item
