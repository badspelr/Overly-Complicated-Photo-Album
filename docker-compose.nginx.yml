# Docker Compose with Nginx Reverse Proxy
# This extends docker-compose.prod.yml with an Nginx service

version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: photo_album_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Nginx configuration
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      
      # Static and media files
      - static_data:/app/staticfiles:ro
      - media_data:/app/media:ro
      
      # SSL certificates (for Let's Encrypt or custom certs)
      - ./nginx/ssl:/etc/nginx/ssl:ro
      
      # Let's Encrypt challenge directory
      - ./nginx/certbot:/var/www/certbot:ro
      
      # Logs
      - ./logs/nginx:/var/log/nginx
    depends_on:
      web:
        condition: service_healthy
    networks:
      - photo_album_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Optional: Certbot for Let's Encrypt SSL
  certbot:
    image: certbot/certbot
    container_name: photo_album_certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/certbot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - photo_album_network

  db:
    image: ankane/pgvector:latest
    container_name: photo_album_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-photo_album}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - photo_album_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: photo_album_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - photo_album_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
    image: ${DOCKER_USERNAME:-local}/photo-album:${TAG:-latest}
    container_name: photo_album_web
    restart: unless-stopped
    env_file:
      - .env
    # Expose port to Nginx (not to host)
    expose:
      - "8000"
    volumes:
      - media_data:/app/media
      - static_data:/app/staticfiles
      - logs_data:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - photo_album_network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery-worker:
    image: ${DOCKER_USERNAME:-local}/photo-album:${TAG:-latest}
    container_name: photo_album_celery_worker
    restart: unless-stopped
    command: celery -A photo_album worker -l info --concurrency=4
    env_file:
      - .env
    volumes:
      - media_data:/app/media
      - logs_data:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - photo_album_network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD-SHELL", "celery -A photo_album inspect ping -d celery@$$HOSTNAME"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s

  celery-beat:
    image: ${DOCKER_USERNAME:-local}/photo-album:${TAG:-latest}
    container_name: photo_album_celery_beat
    restart: unless-stopped
    command: celery -A photo_album beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - .env
    volumes:
      - logs_data:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - photo_album_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "celery -A photo_album inspect ping -d celery@$$HOSTNAME || exit 0"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 30s

networks:
  photo_album_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_data:
    driver: local
  static_data:
    driver: local
  logs_data:
    driver: local
