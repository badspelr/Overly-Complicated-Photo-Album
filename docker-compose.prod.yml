# =============================================================================
# Production Docker Compose Configuration
# =============================================================================
# This file is optimized for production deployment
# - No code volume mounts (code is baked into the image)
# - Proper restart policies
# - Health checks enabled
# - Security-hardened configuration
# =============================================================================

services:
  db:
    image: ankane/pgvector:latest
    container_name: photo_album_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Don't expose database port in production unless needed
    # ports:
    #   - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - photo_album_network

  redis:
    image: redis:7-alpine
    container_name: photo_album_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    # Don't expose Redis port in production unless needed
    # ports:
    #   - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - photo_album_network

  web:
    # Use pre-built image from Docker Hub, or build locally if not available
    image: ${DOCKER_USERNAME:-yourusername}/photo-album:${TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        - VCS_REF=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
    container_name: photo_album_web
    restart: unless-stopped
    command: web
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
      # Only data volumes in production - NO code mounting
      - media_data:/app/media
      - static_data:/app/staticfiles
      - logs_data:/app/logs
    ports:
      - "${WEB_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - photo_album_network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "-L", "-I", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  celery-worker:
    # Use same pre-built image
    image: ${DOCKER_USERNAME:-yourusername}/photo-album:${TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile
    container_name: photo_album_celery_worker
    restart: unless-stopped
    command: celery-worker
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
      # Only data volumes in production
      - media_data:/app/media
      - logs_data:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    networks:
      - photo_album_network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD-SHELL", "celery -A photo_album inspect ping -d celery@$$HOSTNAME"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 60s

  celery-beat:
    # Use same pre-built image
    image: ${DOCKER_USERNAME:-yourusername}/photo-album:${TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile
    container_name: photo_album_celery_beat
    restart: unless-stopped
    command: celery-beat
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      # Only logs in production
      - logs_data:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    networks:
      - photo_album_network
    healthcheck:
      test: ["CMD-SHELL", "celery -A photo_album inspect registered | grep -q 'tasks'"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_data:
    driver: local
  static_data:
    driver: local
  logs_data:
    driver: local

networks:
  photo_album_network:
    driver: bridge
