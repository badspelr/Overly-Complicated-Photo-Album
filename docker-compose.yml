services:
  db:
    image: ankane/pgvector:latest
    container_name: photo_album_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-photo_album}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - photo_album_network

  redis:
    image: redis:7-alpine
    container_name: photo_album_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - photo_album_network

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: photo_album_web
    restart: unless-stopped
    command: web
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
      # Code volumes for development (remove for production)
      - ./album:/app/album
      - ./photo_album:/app/photo_album
      - ./manage.py:/app/manage.py
      # Documentation
      - ./docs:/app/docs
      # Data volumes
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/app/logs
    ports:
      - "${WEB_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - photo_album_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: photo_album_celery_worker
    restart: unless-stopped
    command: celery-worker
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
      # Code volumes for development (remove for production)
      - ./album:/app/album
      - ./photo_album:/app/photo_album
      - ./manage.py:/app/manage.py
      # Documentation
      - ./docs:/app/docs
      # Data volumes
      - ./media:/app/media
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    networks:
      - photo_album_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD-SHELL", "celery -A photo_album inspect ping -d celery@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: photo_album_celery_beat
    restart: unless-stopped
    command: celery-beat
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      # Code volumes for development (remove for production)
      - ./album:/app/album
      - ./photo_album:/app/photo_album
      - ./manage.py:/app/manage.py
      # Documentation
      - ./docs:/app/docs
      # Data volumes
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    networks:
      - photo_album_network
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/celerybeat-schedule || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    name: photo_album_postgres_data
  redis_data:
    name: photo_album_redis_data

networks:
  photo_album_network:
    name: photo_album_network
    driver: bridge